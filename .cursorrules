# 项目简介：综合学习网站，包含导航、论坛、二手市场及热门 GitHub 项目爬取功能
project = "综合学习网站"
description = """
该项目是一个综合学习平台，使用 HTML/CSS/VanillaJS 构建前端，
后端基于 Python+Flask，功能包括：
1. 多站点导航（学习网站、工具网站）
2. 用户论坛
3. 二手交易市场
4. 爬取并展示热门 GitHub 项目
大部分功能待实现，请严格按照需求生成完整代码。
"""

# 技术栈声明
languages = ["html", "css", "javascript", "python"]
frameworks = ["flask"]
css_style = "2-space indent, BEM naming"
js_style = "ES6 modules, async/await for AJAX"
python_style = "Flask blueprints, PEP8"

# 全局模板与片段
template "html_base" {
  when = "创建新 HTML 页面"
  then = <<EOF
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${PageTitle}</title>
  <link rel="stylesheet" href="/static/css/main.css">
</head>
<body>
  <header>
    <nav id="main-nav"></nav>
  </header>
  <main id="content"></main>
  <script type="module" src="/static/js/${PageScript}.js"></script>
</body>
</html>
EOF
}

template "flask_route" {
  when = "创建新 Flask 路由"
  then = <<EOF
from flask import Blueprint, render_template, request
${BlueprintName} = Blueprint('${blueprint}', __name__, url_prefix='/${url_prefix}')

@${BlueprintName}.route('/', methods=['GET'])
def index():
    return render_template('${template_name}.html')
EOF
}

# 建议实现细节
suggest = [
  "在前端使用 Fetch API + async/await 实现异步数据加载",  # 提示 JS 网络请求最佳实践
  "在 Flask 中使用 Blueprints 组织模块化路由",            # 强制后端结构规范
  "爬虫功能使用 requests 与 BeautifulSoup，结果缓存到 Redis",  # 推荐爬取实现
  "所有 Python 代码遵循 PEP8，并添加类型注解",              # 提示代码质量
]

# 命名与文件结构
naming = {
  html: "${module}_${page}.html",
  js: "${module}_${page}.js",
  py: "${blueprint}_routes.py"
}
file_structure = """
/templates/${module}/${page}.html
/static/css/main.css
/static/js/${module}_${page}.js
/${blueprint}/${blueprint}_routes.py
"""

# 交互式提示
interactive = """
在生成代码前，请先确认：
1. 当前功能模块（导航/论坛/市场/爬虫）
2. 页面名称或 Blueprint 名称
3. 是否需要数据模型或表单支持
"""
